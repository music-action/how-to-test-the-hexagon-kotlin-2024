import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    ext.kotlin_version = '1.9.22'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

plugins {
    id("org.jetbrains.kotlin.jvm") version "1.9.22"
    id("org.gradle.application") // Application plugin. Also see 1️⃣ below the code
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'kotlinx-serialization'
apply plugin:  'maven-publish'

defaultTasks 'build'

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
    mavenCentral()
}


ext {
    slf4jVersion = '2.0.9'
    assertjVersion = "3.24.2"
    kotestVersion = '5.8.0'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.slf4j:slf4j-nop:$slf4jVersion"
    implementation('io.arrow-kt:arrow-core:1.2.1')

    implementation 'com.approvaltests:approvaltests:22.3.3'
    implementation 'com.github.javaparser:javaparser-core:3.25.5'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.1'
    testImplementation('io.mockk:mockk:1.13.9')

    testImplementation "io.kotest:kotest-runner-junit5:$kotestVersion"
    testImplementation "io.kotest:kotest-assertions-core:$kotestVersion"
    testImplementation "io.kotest:kotest-framework-datatest:$kotestVersion"
}

wrapper {
    gradleVersion = "8.6"
}

test {
    // Discover and execute JUnit4-based tests
    useJUnit()
    useJUnitPlatform()
    testLogging {
        //events "PASSED", "FAILED", "SKIPPED"
        events "passed", "skipped", "failed"
        exceptionFormat TestExceptionFormat.FULL
    }
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
    testLogging.showStandardStreams = true
    // Fail the 'test' task on the first test failure
    failFast = true

    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "17"
    kotlinOptions.freeCompilerArgs = ["-Xallow-result-return-type"]

}
compileTestKotlin {
    kotlinOptions.jvmTarget = "17"
    kotlinOptions.freeCompilerArgs = ["-Xallow-result-return-type"]
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

